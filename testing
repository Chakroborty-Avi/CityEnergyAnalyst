import cea
import cea.globalvar
from osgeo import gdal, ogr
import cea.inputlocator

# import modules
gv = cea.globalvar.GlobalVariables()
scenario_path = gv.scenario_reference
locator = cea.inputlocator.InputLocator(scenario_path=scenario_path)

# local variables
output_folder = locator.get_building_geometry_folder()
input_buildings_shapefile = locator.get_building_geometry()
input_terrain_raster = locator.get_terrain()

# # run routine
# type_mapping = { gdal.GDT_Byte: ogr.OFTInteger,
#                  gdal.GDT_UInt16: ogr.OFTInteger,
#                  gdal.GDT_Int16: ogr.OFTInteger,
#                  gdal.GDT_UInt32: ogr.OFTInteger,
#                  gdal.GDT_Int32: ogr.OFTInteger,
#                  gdal.GDT_Float32: ogr.OFTReal,
#                  gdal.GDT_Float64: ogr.OFTReal,
#                  gdal.GDT_CInt16: ogr.OFTInteger,
#                  gdal.GDT_CInt32: ogr.OFTInteger,
#                  gdal.GDT_CFloat32: ogr.OFTReal,
#                  gdal.GDT_CFloat64: ogr.OFTReal}
#
# raster_dataset = gdal.Open(input_terrain_raster)
# raster_band = raster_dataset.GetRasterBand(1)
# elevation = raster_band.ReadAsArray()
# dst_layername = "POLYGONIZED_STUFF"
# drv = ogr.GetDriverByName("ESRI Shapefile")
# dst_ds = drv.CreateDataSource(locator.get_terrain_shapefile())
# dst_layer = dst_ds.CreateLayer(dst_layername, srs = None )
# raster_field = ogr.FieldDefn('elevation', type_mapping[raster_band.DataType])
# dst_layer.CreateField(raster_field)
# features_to_delete = dst_layer.SetAttributeFilter("elevation < '0'")
# gdal.Polygonize(raster_band, None, dst_layer, 0, [], callback=None)

import numpy as np

raster_dataset = gdal.Open(input_terrain_raster)
band = raster_dataset.GetRasterBand(1)
a = band.ReadAsArray(0, 0, raster_dataset.RasterXSize, raster_dataset.RasterYSize)
(y_index, x_index) = np.nonzero(a >=0)
(upper_left_x, x_size, x_rotation, upper_left_y, y_rotation, y_size) = raster_dataset.GetGeoTransform()
x_coords = x_index * x_size + upper_left_x + (x_size / 2) #add half the cell size
y_coords = y_index * y_size + upper_left_y + (y_size / 2) #to centre the point

list = [(x, y, z) for x,y,z in zip(x_coords,y_coords, a[y_index,x_index])]
