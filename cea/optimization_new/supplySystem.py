"""
Subsystem Class:
defines all properties as supply system of a single network or stand-alone building in the DCS, including:
STRUCTURE
- types of installed components
- capacities of components
OPERATION
- energy inputs, outputs and losses during operation
PERFORMANCE
- cost of components and energy carriers
- system energy demand (i.e. power inputs to the supply system)
- heat rejection of the system (losses + exhausts)
- greenhouse gas emissions of the system
"""

__author__ = "Mathias Niffeler"
__copyright__ = "Copyright 2022, Cooling Singapore"
__credits__ = ["Mathias Niffeler"]
__license__ = "MIT"
__version__ = "0.1"
__maintainer__ = "NA"
__email__ = "mathias.niffeler@sec.ethz.ch"
__status__ = "Production"

import pandas as pd
from cea.optimization_new.energyCarrier import EnergyCarrier
from cea.optimization_new.component import Component


class SupplySystem(object):
    _main_component_selection = dict()
    _main_final_energy_carrier = EnergyCarrier()
    _supply_component_selections = dict()
    _supply_energy_carriers = tuple()
    _rejection_component_selections = dict()
    _rejection_energy_carriers = tuple()

    def __init__(self, capacity_indicator_vector=None, demand_profile=None):
        if capacity_indicator_vector is None:
            self.capacity_indicators = []
        else:
            self.capacity_indicators = capacity_indicator_vector
        if demand_profile is None:
            self.demand_profile = []
        else:
            self.demand_profile = demand_profile
        self.maximum_demand = 'xxx'
        self.primary_components = 'xxx'
        self.secondary_components = 'xxx'
        self.tertiary_components = 'xxx'
        self.component_energy_inputs = 'xxx'
        self.component_energy_outputs = 'xxx'
        self.component_energy_losses = 'xxx'
        self.cost = 'xxx'
        self.system_energy_demand = 'xxx'
        self.heat_rejection = 'xxx'
        self.greenhouse_gas_emissions = 'xxx'

    def calculate_maximum_demand(self,):

        return self.maximum_demand

    def optimize_subsystem(self):

        return self.capacity_indicators

    def create_components(self):

        return self.primary_components, self.secondary_components, self.tertiary_components

    def perform_water_filling_principle(self):

        return self.component_energy_inputs, self.component_energy_outputs

    def calculate_power_generation(self):

        return self.component_energy_inputs, self.component_energy_outputs, self.component_energy_losses

    def calculate_cost(self):

        return self.cost

    def calculate_system_energy_demand(self):

        return self.system_energy_demand

    def calculate_heat_rejection(self):

        return self.heat_rejection

    def calculate_greenhouse_gas_emissions(self):

        return self.greenhouse_gas_emissions

    @staticmethod
    def initialize_class_variables(domain):
        """
        Depending on the type of network (district cooling or district heating), determine the energy carriers and
        types of components that can be used/installed in different spots of the supply system.
        More specifically, determine which energy carriers and components can be used to:
            A. meet the network's demand (main)
            B. supply necessary inputs to the components of category A
            C. reject 'waste energy' generated by other components in the supply system.

        :param domain: domain these potential components and energy carriers need to be defined for
        :type domain: <cea.optimization_new.domain>-Domain object
        """
        # Set main energy carrier based on type of network-optimisation
        config = domain.config
        network_type = config.optimization_new.network_type
        if network_type == 'DH':
            SupplySystem._main_final_energy_carrier = EnergyCarrier('T60H')
        elif network_type == 'DC':
            SupplySystem._main_final_energy_carrier = EnergyCarrier('T10C')
        else:
            raise ValueError("The only accepted values for the network type are 'DH' and 'DC'.")
        # Get and concatenate components database from Component-class
        components_database_df = pd.DataFrame()
        for key in Component.components_database.keys():
            components_database_df = pd.concat([components_database_df, Component.components_database[key]])
        # Determine main components, supply components and supply energy carriers
        main_output_energy_carrier_codes = components_database_df['main_EC_out'].dropna().unique()
        SupplySystem._supply_energy_carriers = tuple([EnergyCarrier(code) for code in main_output_energy_carrier_codes
                                                      if code != SupplySystem._main_final_energy_carrier])
        for code in main_output_energy_carrier_codes:
            if code == SupplySystem._main_final_energy_carrier.code:
                SupplySystem._main_component_selection = components_database_df['code'][components_database_df['main_EC_out'] == code].unique()
            else:
                SupplySystem._supply_component_selections[code] = components_database_df['code'][components_database_df['main_EC_out'] == code].unique()
        # Determine rejection components and energy carriers
        main_input_energy_carrier_codes = components_database_df['main_EC_in'].dropna().unique()
        SupplySystem._rejection_energy_carriers = tuple([EnergyCarrier(code) for code in main_input_energy_carrier_codes])
        for code in main_input_energy_carrier_codes:
            SupplySystem._rejection_component_selections[code] = components_database_df['code'][components_database_df['main_EC_in'] == code].unique()

