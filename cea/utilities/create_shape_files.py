"""
Creates shape files based on the excel files created by the Urban Block Generator (UBG) in Rhino/Grasshopper.

The UBG creates the following files to be used as input for the CEA:

- age.xlsx
- architecture.xlsx
- district.xlsx
- district_shp.xlsx
- occupancy.xlsx
- supply_systems.xlsx
- zone.xlsx
- zone_shp.xlsx

The CEA uses .dbf and .shp files to represent it's input data. Since the UBG is a Grasshopper plugin, it is restricted
in the python packages that can be installed and that makes it hard to create these data formats. Therefore,
``cea create-shape-files`` script reads in the Excel output and creates the appropriate .shp and .dbf files.

The input to the script is the path to the folder with the Excel files. This is the configuration variable
``create-shape-files:input-folder``

The output is the corresponding files relative to ``config.scenario``:

- inputs/building-geometry/district.shp
- inputs/building-geometry/zone.shp
- inputs/building-properties/age.dbf
- inputs/building-properties/architecture.dbf
- inputs/building-properties/occupancy.dbf
- inputs/building-properties/supply_systems.dbf

.. note:: what about the other systems / files??
"""
from __future__ import division

import os
import pandas as pd
import pysal

import cea.config
import cea.inputlocator

__author__ = "Daren Thomas"
__copyright__ = "Copyright 2017, Architecture and Building Systems - ETH Zurich"
__credits__ = ["Daren Thomas"]
__license__ = "MIT"
__version__ = "0.1"
__maintainer__ = "Daren Thomas"
__email__ = "cea@arch.ethz.ch"
__status__ = "Production"


def create_shape_files(locator, input_folder):
    """Create the shapefiles based on the Excel files generated by the UBG.

    :param locator: an InputLocator set to the scenario to generate for
    :type locator: cea.inputlocator.InputLocator

    :param input_folder: the path to the folder containing the Excel files.
    :type input_folder: basestring
    """
    age_xlsx = os.path.join(input_folder, 'age.xlsx')
    create_dbf(age_xlsx, locator.get_building_age(), [('Name', 'C', 50, 0),
                                                          ('built', 'N', 10, 0),
                                                          ('roof', 'N', 10, 0),
                                                          ('windows', 'N', 10, 0),
                                                          ('partitions', 'N', 10, 0),
                                                          ('basement', 'N', 10, 0),
                                                          ('HVAC', 'N', 10, 0),
                                                          ('envelope', 'N', 10, 0)])


def create_dbf(excel_path, dbf_path, column_spec):
    """Create a dbf file based on the excel path and a column spec."""
    assert os.path.exists(excel_path), 'File not found: %s' % excel_path

    age_df = pd.read_excel(excel_path)
    dbf = pysal.open(dbf_path, 'w', 'dbf')
    dbf.header = [cs[0] for cs in column_spec]
    dbf.field_spec = [cs[1:] for cs in column_spec]
    for row in range(len(age_df)):
        dbf.write(age_df.iloc[row])


def main(config):
    """
    Call py:func:`create_shape_files` with a locator for the scenario.

    :param config: The configuration to use (``general:scenario``, ``create-shape-files:input-folder``)
    :type config: cea.config.Configuration
    :return:
    """
    assert os.path.exists(config.scenario), 'Scenario not found: %s' % config.scenario
    locator = cea.inputlocator.InputLocator(config.scenario)

    # print out all configuration variables used by this script
    print("Running template with scenario = %s" % config.scenario)
    print("Running template with input-folder = %s" % config.create_shape_files.input_folder)

    create_shape_files(locator, config.create_shape_files.input_folder)


if __name__ == '__main__':
    main(cea.config.Configuration())
